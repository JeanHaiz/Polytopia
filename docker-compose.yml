version: '3.3'

services:
    database:
        build:
            context: ./database
            dockerfile: Dockerfile
        container_name: database
        command: postgres -c stats_temp_directory=/tmp
        restart: "always"
        mem_limit: 1g
        ports:
            - 5432:5432
        environment:
            POSTGRES_USER: discordBot
            POSTGRES_PASSWORD: password123
            POSTGRES_DB: polytopiaHelper_dev
            PGDATABASE: polytopiaHelper_dev
            PGUSER: discordBot
            # PGHOST: http://database:5432
        volumes:
            # - ./database/1_init_sql.sql:/docker-entrypoint-initdb.d/1_init.sql
            - ./db-data/:/var/lib/postgresql/data/
        networks:
            - polytopia
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready", "-d", "polytopiaHelper_dev"]
            interval: 30s
            timeout: 60s
            retries: 5
            start_period: 80s

    helper:
        depends_on:
            database:
                condition: service_healthy
            # kibana:
            #     condition: service_healthy
        build:
            context: "/Users/jean/Documents/Coding/Polytopia/src/"
            dockerfile: Dockerfile
        # restart: "unless-stopped"
        container_name: helper
        mem_limit: 1g
        volumes:
            - /Users/jean/Documents/Coding/Polytopia/src:/app
            - certs:/usr/share/elasticsearch/config/certs
        # /usr/share/elasticsearch/config/certs/ca/ca.crt
        env_file:
            - .env
        deploy:
            resources:
                limits:
                    memory: 4000M
        networks:
            - polytopia

    jupyter-notebook:
        image: jupyter/datascience-notebook
        environment:
            - CHOWN_HOME=yes
            - CHOWN_HOME_OPTS='-R'
        volumes:
            - /Users/jean/Documents/Coding/Polytopia/jupyter_noteboooks:/home/jovyan/work
        ports:
            - 8888:8888
        networks:
            - polytopia

    es_setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION:-"8.4.0"}
        container_name: es_setup
        user: "0"
        platform: ${PLATFORM:-linux/amd64}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
        command: >
            bash -c '
                if [ x${ELASTIC_PASSWORD} == x ]; then
                    echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
                    exit 1;
                elif [ x${KIBANA_PASSWORD} == x ]; then
                    echo "Set the KIBANA_PASSWORD environment variable in the .env file";
                    exit 1;
                fi;
                if [ ! -f config/certs/ca.zip ]; then
                    echo "Creating CA";
                    bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                    unzip config/certs/ca.zip -d config/certs;
                fi;
                if [ ! -f config/certs/certs.zip ]; then
                    echo "Creating certs";
                    echo -ne \
                    "instances:\n"\
                    "  - name: elasticsearch\n"\
                    "    dns:\n"\
                    "      - elasticsearch\n"\
                    "      - localhost\n"\
                    "    ip:\n"\
                    "      - 127.0.0.1\n"\
                    > config/certs/instances.yml;
                    bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                    unzip config/certs/certs.zip -d config/certs;
                fi;
                echo "Setting file permissions"
                chown -R root:root config/certs;
                find . -type d -exec chmod 750 \{\} \;;
                find . -type f -exec chmod 640 \{\} \;;
                echo "Waiting for Elasticsearch availability";
                until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
                echo "Setting kibana_system password";
                until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
                echo "All done!";
            '
        networks:
            - polytopia
        healthcheck:
            test: [ "CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]" ]
            interval: 1s
            timeout: 5s
            retries: 120

    elasticsearch:
        depends_on:
            es_setup:
                condition: service_healthy
        image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION:-8.4.0}
        container_name: elasticsearch
        platform: ${PLATFORM:-linux/amd64}
        # user: "1000:1000"
        environment:
            - node.name=elasticsearch
            - cluster.name=docker-cluster
            - cluster.initial_master_nodes=elasticsearch
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            # - discovery.type=single-node
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
            - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.http.ssl.verification_mode=certificate
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
            - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${ELK_LICENSE}
        mem_limit: ${ELK_MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - elasticsearch:/usr/share/elasticsearch/data
            - certs:/usr/share/elasticsearch/config/certs
        ports:
            - 9200:9200
            - 9300:9300
        networks:
            - polytopia
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
                ]
            interval: 10s
            timeout: 10s
            retries: 120
        # expose:
        #    - "6379"

    kibana:
        depends_on:
            elasticsearch:
                condition: service_healthy
        container_name: kibana
        image: docker.elastic.co/kibana/kibana:${ELK_VERSION:-8.4.0}
        platform: ${PLATFORM:-linux/amd64}
        environment:
            - SERVER_NAME=kibana
            # - xpack.security.enabled=true
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
            - ELASTICSEARCH_HOSTS="https://elasticsearch:9200"
            - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
            # - elasticsearch.username=kibana_system
            # - elasticsearch.password="h7uIr57rEl8FsznpcnY_"
            # "4209420*9fd%oiahf=o2425"
            # - elasticsearch.hosts=["http://elasticsearch:9200"]
            # - ELASTICSEARCH_PASSWORD="4209420*9fd%oiahf=o2425"
            # - ingest.geoip.downloader.enabled=false
            # - xpack.encryptedSavedObjects.encryptionKey="something_at_least_32_characters"
            # - xpack.security.encryptionKey="something_at_least_32_characters"
        ports:
            - '5601:5601'
        volumes:
            - certs:/usr/share/kibana/config/certs
            - kibanadata:/usr/share/kibana/data
        mem_limit: ${ELK_MEM_LIMIT}
        networks:
            - polytopia
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
                ]
            interval: 10s
            timeout: 10s
            retries: 120

    filebeat:
        depends_on:
            kibana:
                condition: service_healthy
        container_name: filebeat
        user: "root"
        image: docker.elastic.co/beats/filebeat:${ELK_VERSION:-8.4.0}
        platform: ${PLATFORM:-linux/amd64}
        volumes:
            - ./elasticsearch/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - certs:/usr/share/filebeat/config/certs
        environment:
            - strict.perms=false
            - setup.kibana.host=kibana:5601
            - output.elasticsearch.hosts=["elasticsearch:9200"]

networks:
    polytopia:
        driver: bridge
        driver_opts:
            com.docker.network.bridge.enable_icc: "true"

volumes:
    certs:
        driver: local
    elasticsearch:
        driver: local
    kibanadata:
        driver: local
